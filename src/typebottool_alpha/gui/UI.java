/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package typebottool_alpha.gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.dispatcher.SwingDispatchService;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import typebottool_alpha.keyboard.KeyBind;
import typebottool_alpha.keyboard.Keyboard;

/**
 *
 * @author Rajko
 */
public class UI extends javax.swing.JFrame implements NativeKeyListener {

    private Keyboard keyboard;
    private Timer timer = new Timer();
    private String textToFinish = "";

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        this.delaySlider.setMaximum(200);
        this.delaySlider.setMinimum(1);
        this.delaySlider.setValue(1);
        this.delayLabel.setText("Delay for letters (ms) " + delaySlider.getValue());
        this.delaySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                delayLabel.setText("Delay for letters (ms) " + delaySlider.getValue());
            }
        });

        // Get the logger for "org.jnativehook" and set the level to warning.
        Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
        logger.setLevel(Level.OFF);             // TODO Nastavi≈• na WARNING

        // Don't forget to disable the parent handlers.
        //logger.setUseParentHandlers(false);
        // Set the event dispatcher to a swing safe executor service.
        GlobalScreen.setEventDispatcher(new SwingDispatchService());

        try {
            GlobalScreen.registerNativeHook();
            GlobalScreen.addNativeKeyListener(this);
        } catch (NativeHookException ex) {
            System.out.println("pir");
        }
        this.setVisible(true);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int) screenSize.getWidth();
        int height = (int) screenSize.getHeight();

        this.setLocation((width / 2) - this.getWidth() / 2, (height / 2) - this.getHeight() / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        addPrefixButton = new javax.swing.JButton();
        deletePrefixButton = new javax.swing.JButton();
        delaySlider = new javax.swing.JSlider();
        delayLabel = new javax.swing.JLabel();
        shuffleButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        loadButton.setText("Load file");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save file");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        addPrefixButton.setText("Add prefix");
        addPrefixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPrefixButtonActionPerformed(evt);
            }
        });

        deletePrefixButton.setText("Del prefix");
        deletePrefixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePrefixButtonActionPerformed(evt);
            }
        });

        delayLabel.setText("Delay for letters (ms)");

        shuffleButton.setText("Shuffle");
        shuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addPrefixButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shuffleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deletePrefixButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(delayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(saveButton)
                    .addComponent(addPrefixButton)
                    .addComponent(deletePrefixButton)
                    .addComponent(shuffleButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(delaySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                Scanner scan = new Scanner(selectedFile);
                String s = "";

                while (scan.hasNext()) {
                    s += scan.nextLine() + "\n";
                }

                jTextArea1.setText(jTextArea1.getText() + "\n" + s);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void deletePrefixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePrefixButtonActionPerformed
        if (!jTextArea1.getText().isEmpty()) {
            try {
                int subS = Integer.parseInt(JOptionPane.showInputDialog("Enter number of lerres to delete from start."));
                String res = "";

                String s[] = jTextArea1.getText().split("\n");

                for (int i = 0; i < s.length; i++) {
                    res = res + s[i].substring(subS) + "\n";
                }

                jTextArea1.setText(res);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_deletePrefixButtonActionPerformed

    private void addPrefixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPrefixButtonActionPerformed
        if (!jTextArea1.getText().isEmpty()) {
            String s[] = jTextArea1.getText().split("\n");
            String prefix = JOptionPane.showInputDialog("Enter prefix to add:");

            String result = "";

            for (int i = 0; i < s.length; i++) {
                s[i] = prefix + s[i];
                result += s[i] + "\n";
            }

            jTextArea1.setText(result);

        } else {
            JOptionPane.showMessageDialog(this, "Field is empty!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addPrefixButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        PrintWriter printWriter = null;
        try {
            printWriter = new PrintWriter(JOptionPane.showInputDialog("Enter file name: ") + ".txt");

            printWriter.print(jTextArea1.getText());
            JOptionPane.showMessageDialog(null, "File saved!");
            printWriter.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            printWriter.close();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleButtonActionPerformed
        String s[] = jTextArea1.getText().split("\n");

        List<String> l = Arrays.asList(s);
        Collections.shuffle(l);
        s = l.toArray(new String[l.size()]);

        String res = "";

        for (int i = 0; i < s.length; i++) {
            res = res + s[i] + "\n";
        }
        jTextArea1.setText(res);
    }//GEN-LAST:event_shuffleButtonActionPerformed

    @Override
    public void nativeKeyTyped(NativeKeyEvent nke) {
    }

    @Override
    public void nativeKeyPressed(NativeKeyEvent nke) {
        if (nke.getKeyCode() == KeyBind.START.getKeyCode()) {
            keyboard = new Keyboard(jTextArea1.getText(), this.delaySlider.getValue());
            timer.schedule(keyboard, 0, keyboard.getTypingDelay());
        } else if (nke.getKeyCode() == KeyBind.CANCEL.getKeyCode()) {
            keyboard.stopTyping();
        } else if (nke.getKeyCode() == KeyBind.CLOSE_APP.getKeyCode()) {
            System.out.println("User exiting application...");
            System.exit(0);
        } else if (nke.getKeyCode() == KeyBind.PAUSE_TYPING.getKeyCode()) {
            if (keyboard.isPaused()) {
//                keyboard.resumeTyping();
                keyboard = new Keyboard(textToFinish, this.delaySlider.getValue());
                timer.schedule(keyboard, 0, keyboard.getTypingDelay());
            } else {
                textToFinish = keyboard.pauseTyping();
            }
        }

    }

    @Override
    public void nativeKeyReleased(NativeKeyEvent nke) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPrefixButton;
    private javax.swing.JLabel delayLabel;
    private javax.swing.JSlider delaySlider;
    private javax.swing.JButton deletePrefixButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton shuffleButton;
    // End of variables declaration//GEN-END:variables
}
